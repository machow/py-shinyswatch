[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "shinyswatch",
    "section": "",
    "text": "Bootswatch + Bootstrap 5 themes for Shiny.\n\n\npip install shinyswatch\nTo install the latest development version from this repository:\npip install https://github.com/rstudio/py-shinyswatch/tarball/main\n\n\n\nTo use a theme, call the theme function and add it to your App’s UI definition.\n# Darkly theme\nshinyswatch.theme.darkly()\n\n# Sketchy theme\nshinyswatch.theme.sketchy()\nExample Shiny application:\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| height: 500\n#| viewerHeight: 1000\nfrom datetime import date\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\nfrom shiny.ui import h2, tags\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    # Theme code - start\n    # Add the Theme's HTML Dependency object in the UI code\n    shinyswatch.theme.sketchy(),\n    # Theme code - end\n    ui.panel_title(\"Changing the values of inputs from the server\"),\n    ui.row(\n        ui.column(\n            4,\n            ui.panel_well(\n                tags.h4(\"These inputs control the other inputs on the page\"),\n                ui.input_text(\n                    \"control_label\", \"This controls some of the labels:\", \"LABEL TEXT\"\n                ),\n                ui.input_slider(\n                    \"control_num\", \"This controls values:\", min=1, max=20, value=15\n                ),\n            ),\n        ),\n        ui.column(\n            4,\n            ui.panel_well(\n                tags.h4(\"These inputs are controlled by the other inputs\"),\n                ui.input_text(\"inText\", \"Text input:\", value=\"start text\"),\n                ui.input_numeric(\n                    \"inNumber\", \"Number input:\", min=1, max=20, value=5, step=0.5\n                ),\n                ui.input_numeric(\n                    \"inNumber2\", \"Number input 2:\", min=1, max=20, value=5, step=0.5\n                ),\n                ui.input_slider(\"inSlider\", \"Slider input:\", min=1, max=20, value=15),\n                ui.input_slider(\n                    \"inSlider2\", \"Slider input 2:\", min=1, max=20, value=(5, 15)\n                ),\n                ui.input_slider(\n                    \"inSlider3\", \"Slider input 3:\", min=1, max=20, value=(5, 15)\n                ),\n                ui.input_date(\"inDate\", \"Date input:\"),\n                ui.input_date_range(\"inDateRange\", \"Date range input:\"),\n            ),\n        ),\n        ui.column(\n            4,\n            ui.panel_well(\n                ui.input_checkbox(\"inCheckbox\", \"Checkbox input\", value=False),\n                ui.input_checkbox_group(\n                    \"inCheckboxGroup\",\n                    \"Checkbox group input:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                ),\n                ui.input_radio_buttons(\n                    \"inRadio\",\n                    \"Radio buttons:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                ),\n                ui.input_select(\n                    \"inSelect\",\n                    \"Select input:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                ),\n                ui.input_select(\n                    \"inSelect2\",\n                    \"Select input 2:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                    multiple=True,\n                ),\n            ),\n            ui.navset_tab(\n                ui.nav(\"panel1\", h2(\"This is the first panel.\")),\n                ui.nav(\"panel2\", h2(\"This is the second panel.\")),\n                id=\"inTabset\",\n            ),\n        ),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        # We'll use these multiple times, so use short var names for\n        # convenience.\n        c_label = input.control_label()\n        c_num = input.control_num()\n\n        # Text =====================================================\n        # Change both the label and the text\n        ui.update_text(\n            \"inText\",\n            label=\"New \" + c_label,\n            value=\"New text \" + str(c_num),\n        )\n\n        # Number ===================================================\n        # Change the value\n        ui.update_numeric(\"inNumber\", value=c_num)\n\n        # Change the label, value, min, and max\n        ui.update_numeric(\n            \"inNumber2\",\n            label=\"Number \" + c_label,\n            value=c_num,\n            min=c_num - 10,\n            max=c_num + 10,\n            step=5,\n        )\n\n        # Slider input =============================================\n        # Only label and value can be set for slider\n        ui.update_slider(\"inSlider\", label=\"Slider \" + c_label, value=c_num)\n\n        # Slider range input =======================================\n        # For sliders that pick out a range, pass in a vector of 2\n        # values.\n        ui.update_slider(\"inSlider2\", value=(c_num - 1, c_num + 1))\n\n        # Only change the upper handle\n        ui.update_slider(\"inSlider3\", value=(input.inSlider3()[0], c_num + 2))\n\n        # Date input ===============================================\n        # Only label and value can be set for date input\n        ui.update_date(\"inDate\", label=\"Date \" + c_label, value=date(2013, 4, c_num))\n\n        # Date range input =========================================\n        # Only label and value can be set for date range input\n        ui.update_date_range(\n            \"inDateRange\",\n            label=\"Date range \" + c_label,\n            start=date(2013, 1, c_num),\n            end=date(2013, 12, c_num),\n            min=date(2001, 1, c_num),\n            max=date(2030, 1, c_num),\n        )\n\n        # # Checkbox ===============================================\n        ui.update_checkbox(\"inCheckbox\", value=c_num % 2)\n\n        # Checkbox group ===========================================\n        # Create a list of new options, where the name of the items\n        # is something like 'option label x A', and the values are\n        # 'option-x-A'.\n        opt_labels = [f\"option label {c_num} {type}\" for type in [\"A\", \"B\"]]\n        opt_vals = [f\"option-{c_num}-{type}\" for type in [\"A\", \"B\"]]\n        opts_dict = dict(zip(opt_vals, opt_labels))\n\n        # Set the label, choices, and selected item\n        ui.update_checkbox_group(\n            \"inCheckboxGroup\",\n            label=\"Checkbox group \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-A\",\n        )\n\n        # Radio group ==============================================\n        ui.update_radio_buttons(\n            \"inRadio\",\n            label=\"Radio \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-A\",\n        )\n        # Select input =============================================\n        # Create a list of new options, where the name of the items\n        # is something like 'option label x A', and the values are\n        # 'option-x-A'.\n        ui.update_select(\n            \"inSelect\",\n            label=\"Select \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-A\",\n        )\n\n        # Can also set the label and select an item (or more than\n        # one if it's a multi-select)\n        ui.update_select(\n            \"inSelect2\",\n            label=\"Select label \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-B\",\n        )\n\n        # Tabset input =============================================\n        # Change the selected tab.\n        # The tabsetPanel must have been created with an 'id' argument\n        ui.update_navs(\"inTabset\", selected=\"panel2\" if c_num % 2 else \"panel1\")\n\n\napp = App(app_ui, server, debug=False)\n\n## file: requirements.txt\nshiny\nshinyswatch\n\nNote: While the styling is contained within {shinyswatch}, fonts are requested from a CDN. This means that you will need an internet connection to use the themes."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "shinyswatch",
    "section": "",
    "text": "pip install shinyswatch\nTo install the latest development version from this repository:\npip install https://github.com/rstudio/py-shinyswatch/tarball/main"
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "shinyswatch",
    "section": "",
    "text": "To use a theme, call the theme function and add it to your App’s UI definition.\n# Darkly theme\nshinyswatch.theme.darkly()\n\n# Sketchy theme\nshinyswatch.theme.sketchy()\nExample Shiny application:\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| height: 500\n#| viewerHeight: 1000\nfrom datetime import date\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\nfrom shiny.ui import h2, tags\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    # Theme code - start\n    # Add the Theme's HTML Dependency object in the UI code\n    shinyswatch.theme.sketchy(),\n    # Theme code - end\n    ui.panel_title(\"Changing the values of inputs from the server\"),\n    ui.row(\n        ui.column(\n            4,\n            ui.panel_well(\n                tags.h4(\"These inputs control the other inputs on the page\"),\n                ui.input_text(\n                    \"control_label\", \"This controls some of the labels:\", \"LABEL TEXT\"\n                ),\n                ui.input_slider(\n                    \"control_num\", \"This controls values:\", min=1, max=20, value=15\n                ),\n            ),\n        ),\n        ui.column(\n            4,\n            ui.panel_well(\n                tags.h4(\"These inputs are controlled by the other inputs\"),\n                ui.input_text(\"inText\", \"Text input:\", value=\"start text\"),\n                ui.input_numeric(\n                    \"inNumber\", \"Number input:\", min=1, max=20, value=5, step=0.5\n                ),\n                ui.input_numeric(\n                    \"inNumber2\", \"Number input 2:\", min=1, max=20, value=5, step=0.5\n                ),\n                ui.input_slider(\"inSlider\", \"Slider input:\", min=1, max=20, value=15),\n                ui.input_slider(\n                    \"inSlider2\", \"Slider input 2:\", min=1, max=20, value=(5, 15)\n                ),\n                ui.input_slider(\n                    \"inSlider3\", \"Slider input 3:\", min=1, max=20, value=(5, 15)\n                ),\n                ui.input_date(\"inDate\", \"Date input:\"),\n                ui.input_date_range(\"inDateRange\", \"Date range input:\"),\n            ),\n        ),\n        ui.column(\n            4,\n            ui.panel_well(\n                ui.input_checkbox(\"inCheckbox\", \"Checkbox input\", value=False),\n                ui.input_checkbox_group(\n                    \"inCheckboxGroup\",\n                    \"Checkbox group input:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                ),\n                ui.input_radio_buttons(\n                    \"inRadio\",\n                    \"Radio buttons:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                ),\n                ui.input_select(\n                    \"inSelect\",\n                    \"Select input:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                ),\n                ui.input_select(\n                    \"inSelect2\",\n                    \"Select input 2:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                    multiple=True,\n                ),\n            ),\n            ui.navset_tab(\n                ui.nav(\"panel1\", h2(\"This is the first panel.\")),\n                ui.nav(\"panel2\", h2(\"This is the second panel.\")),\n                id=\"inTabset\",\n            ),\n        ),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        # We'll use these multiple times, so use short var names for\n        # convenience.\n        c_label = input.control_label()\n        c_num = input.control_num()\n\n        # Text =====================================================\n        # Change both the label and the text\n        ui.update_text(\n            \"inText\",\n            label=\"New \" + c_label,\n            value=\"New text \" + str(c_num),\n        )\n\n        # Number ===================================================\n        # Change the value\n        ui.update_numeric(\"inNumber\", value=c_num)\n\n        # Change the label, value, min, and max\n        ui.update_numeric(\n            \"inNumber2\",\n            label=\"Number \" + c_label,\n            value=c_num,\n            min=c_num - 10,\n            max=c_num + 10,\n            step=5,\n        )\n\n        # Slider input =============================================\n        # Only label and value can be set for slider\n        ui.update_slider(\"inSlider\", label=\"Slider \" + c_label, value=c_num)\n\n        # Slider range input =======================================\n        # For sliders that pick out a range, pass in a vector of 2\n        # values.\n        ui.update_slider(\"inSlider2\", value=(c_num - 1, c_num + 1))\n\n        # Only change the upper handle\n        ui.update_slider(\"inSlider3\", value=(input.inSlider3()[0], c_num + 2))\n\n        # Date input ===============================================\n        # Only label and value can be set for date input\n        ui.update_date(\"inDate\", label=\"Date \" + c_label, value=date(2013, 4, c_num))\n\n        # Date range input =========================================\n        # Only label and value can be set for date range input\n        ui.update_date_range(\n            \"inDateRange\",\n            label=\"Date range \" + c_label,\n            start=date(2013, 1, c_num),\n            end=date(2013, 12, c_num),\n            min=date(2001, 1, c_num),\n            max=date(2030, 1, c_num),\n        )\n\n        # # Checkbox ===============================================\n        ui.update_checkbox(\"inCheckbox\", value=c_num % 2)\n\n        # Checkbox group ===========================================\n        # Create a list of new options, where the name of the items\n        # is something like 'option label x A', and the values are\n        # 'option-x-A'.\n        opt_labels = [f\"option label {c_num} {type}\" for type in [\"A\", \"B\"]]\n        opt_vals = [f\"option-{c_num}-{type}\" for type in [\"A\", \"B\"]]\n        opts_dict = dict(zip(opt_vals, opt_labels))\n\n        # Set the label, choices, and selected item\n        ui.update_checkbox_group(\n            \"inCheckboxGroup\",\n            label=\"Checkbox group \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-A\",\n        )\n\n        # Radio group ==============================================\n        ui.update_radio_buttons(\n            \"inRadio\",\n            label=\"Radio \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-A\",\n        )\n        # Select input =============================================\n        # Create a list of new options, where the name of the items\n        # is something like 'option label x A', and the values are\n        # 'option-x-A'.\n        ui.update_select(\n            \"inSelect\",\n            label=\"Select \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-A\",\n        )\n\n        # Can also set the label and select an item (or more than\n        # one if it's a multi-select)\n        ui.update_select(\n            \"inSelect2\",\n            label=\"Select label \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-B\",\n        )\n\n        # Tabset input =============================================\n        # Change the selected tab.\n        # The tabsetPanel must have been created with an 'id' argument\n        ui.update_navs(\"inTabset\", selected=\"panel2\" if c_num % 2 else \"panel1\")\n\n\napp = App(app_ui, server, debug=False)\n\n## file: requirements.txt\nshiny\nshinyswatch\n\nNote: While the styling is contained within {shinyswatch}, fonts are requested from a CDN. This means that you will need an internet connection to use the themes."
  },
  {
    "objectID": "reference/theme.cerulean.html",
    "href": "reference/theme.cerulean.html",
    "title": "theme.cerulean",
    "section": "",
    "text": "theme.cerulean()\nTo see a live demo of the cerulean Bootswatch theme, visit https://bootswatch.com/cerulean/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (cerulean) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.cerulean(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.cerulean.html#returns",
    "href": "reference/theme.cerulean.html#returns",
    "title": "theme.cerulean",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (cerulean) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.cerulean.html#examples",
    "href": "reference/theme.cerulean.html#examples",
    "title": "theme.cerulean",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.cerulean(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.united.html",
    "href": "reference/theme.united.html",
    "title": "theme.united",
    "section": "",
    "text": "theme.united()\nTo see a live demo of the united Bootswatch theme, visit https://bootswatch.com/united/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (united) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.united(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.united.html#returns",
    "href": "reference/theme.united.html#returns",
    "title": "theme.united",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (united) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.united.html#examples",
    "href": "reference/theme.united.html#examples",
    "title": "theme.united",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.united(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.superhero.html",
    "href": "reference/theme.superhero.html",
    "title": "theme.superhero",
    "section": "",
    "text": "theme.superhero()\nTo see a live demo of the superhero Bootswatch theme, visit https://bootswatch.com/superhero/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (superhero) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.superhero(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.superhero.html#returns",
    "href": "reference/theme.superhero.html#returns",
    "title": "theme.superhero",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (superhero) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.superhero.html#examples",
    "href": "reference/theme.superhero.html#examples",
    "title": "theme.superhero",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.superhero(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Generic method to retrieve a Bootswatch + Bootstrap 5 theme.\n\n\n\nget_theme\nCreate a Bootswatch and Bootstrap 5 theme for Shiny.\n\n\n\n\n\n\nFunctions to create a specific theme.\n\n\n\ntheme.cerulean\nTo see a live demo of the cerulean Bootswatch theme, visit [https://bootswatch.com/cerulean/](https://bootswatch.com/cerulean/).\n\n\ntheme.cosmo\nTo see a live demo of the cosmo Bootswatch theme, visit [https://bootswatch.com/cosmo/](https://bootswatch.com/cosmo/).\n\n\ntheme.cyborg\nTo see a live demo of the cyborg Bootswatch theme, visit [https://bootswatch.com/cyborg/](https://bootswatch.com/cyborg/).\n\n\ntheme.darkly\nTo see a live demo of the darkly Bootswatch theme, visit [https://bootswatch.com/darkly/](https://bootswatch.com/darkly/).\n\n\ntheme.flatly\nTo see a live demo of the flatly Bootswatch theme, visit [https://bootswatch.com/flatly/](https://bootswatch.com/flatly/).\n\n\ntheme.journal\nTo see a live demo of the journal Bootswatch theme, visit [https://bootswatch.com/journal/](https://bootswatch.com/journal/).\n\n\ntheme.litera\nTo see a live demo of the litera Bootswatch theme, visit [https://bootswatch.com/litera/](https://bootswatch.com/litera/).\n\n\ntheme.lumen\nTo see a live demo of the lumen Bootswatch theme, visit [https://bootswatch.com/lumen/](https://bootswatch.com/lumen/).\n\n\ntheme.lux\nTo see a live demo of the lux Bootswatch theme, visit [https://bootswatch.com/lux/](https://bootswatch.com/lux/).\n\n\ntheme.materia\nTo see a live demo of the materia Bootswatch theme, visit [https://bootswatch.com/materia/](https://bootswatch.com/materia/).\n\n\ntheme.minty\nTo see a live demo of the minty Bootswatch theme, visit [https://bootswatch.com/minty/](https://bootswatch.com/minty/).\n\n\ntheme.morph\nTo see a live demo of the morph Bootswatch theme, visit [https://bootswatch.com/morph/](https://bootswatch.com/morph/).\n\n\ntheme.pulse\nTo see a live demo of the pulse Bootswatch theme, visit [https://bootswatch.com/pulse/](https://bootswatch.com/pulse/).\n\n\ntheme.quartz\nTo see a live demo of the quartz Bootswatch theme, visit [https://bootswatch.com/quartz/](https://bootswatch.com/quartz/).\n\n\ntheme.sandstone\nTo see a live demo of the sandstone Bootswatch theme, visit [https://bootswatch.com/sandstone/](https://bootswatch.com/sandstone/).\n\n\ntheme.simplex\nTo see a live demo of the simplex Bootswatch theme, visit [https://bootswatch.com/simplex/](https://bootswatch.com/simplex/).\n\n\ntheme.sketchy\nTo see a live demo of the sketchy Bootswatch theme, visit [https://bootswatch.com/sketchy/](https://bootswatch.com/sketchy/).\n\n\ntheme.slate\nTo see a live demo of the slate Bootswatch theme, visit [https://bootswatch.com/slate/](https://bootswatch.com/slate/).\n\n\ntheme.solar\nTo see a live demo of the solar Bootswatch theme, visit [https://bootswatch.com/solar/](https://bootswatch.com/solar/).\n\n\ntheme.spacelab\nTo see a live demo of the spacelab Bootswatch theme, visit [https://bootswatch.com/spacelab/](https://bootswatch.com/spacelab/).\n\n\ntheme.superhero\nTo see a live demo of the superhero Bootswatch theme, visit [https://bootswatch.com/superhero/](https://bootswatch.com/superhero/).\n\n\ntheme.united\nTo see a live demo of the united Bootswatch theme, visit [https://bootswatch.com/united/](https://bootswatch.com/united/).\n\n\ntheme.vapor\nTo see a live demo of the vapor Bootswatch theme, visit [https://bootswatch.com/vapor/](https://bootswatch.com/vapor/).\n\n\ntheme.yeti\nTo see a live demo of the yeti Bootswatch theme, visit [https://bootswatch.com/yeti/](https://bootswatch.com/yeti/).\n\n\ntheme.zephyr\nTo see a live demo of the zephyr Bootswatch theme, visit [https://bootswatch.com/zephyr/](https://bootswatch.com/zephyr/)."
  },
  {
    "objectID": "reference/index.html#get-a-theme",
    "href": "reference/index.html#get-a-theme",
    "title": "Function reference",
    "section": "",
    "text": "Generic method to retrieve a Bootswatch + Bootstrap 5 theme.\n\n\n\nget_theme\nCreate a Bootswatch and Bootstrap 5 theme for Shiny."
  },
  {
    "objectID": "reference/index.html#themes",
    "href": "reference/index.html#themes",
    "title": "Function reference",
    "section": "",
    "text": "Functions to create a specific theme.\n\n\n\ntheme.cerulean\nTo see a live demo of the cerulean Bootswatch theme, visit [https://bootswatch.com/cerulean/](https://bootswatch.com/cerulean/).\n\n\ntheme.cosmo\nTo see a live demo of the cosmo Bootswatch theme, visit [https://bootswatch.com/cosmo/](https://bootswatch.com/cosmo/).\n\n\ntheme.cyborg\nTo see a live demo of the cyborg Bootswatch theme, visit [https://bootswatch.com/cyborg/](https://bootswatch.com/cyborg/).\n\n\ntheme.darkly\nTo see a live demo of the darkly Bootswatch theme, visit [https://bootswatch.com/darkly/](https://bootswatch.com/darkly/).\n\n\ntheme.flatly\nTo see a live demo of the flatly Bootswatch theme, visit [https://bootswatch.com/flatly/](https://bootswatch.com/flatly/).\n\n\ntheme.journal\nTo see a live demo of the journal Bootswatch theme, visit [https://bootswatch.com/journal/](https://bootswatch.com/journal/).\n\n\ntheme.litera\nTo see a live demo of the litera Bootswatch theme, visit [https://bootswatch.com/litera/](https://bootswatch.com/litera/).\n\n\ntheme.lumen\nTo see a live demo of the lumen Bootswatch theme, visit [https://bootswatch.com/lumen/](https://bootswatch.com/lumen/).\n\n\ntheme.lux\nTo see a live demo of the lux Bootswatch theme, visit [https://bootswatch.com/lux/](https://bootswatch.com/lux/).\n\n\ntheme.materia\nTo see a live demo of the materia Bootswatch theme, visit [https://bootswatch.com/materia/](https://bootswatch.com/materia/).\n\n\ntheme.minty\nTo see a live demo of the minty Bootswatch theme, visit [https://bootswatch.com/minty/](https://bootswatch.com/minty/).\n\n\ntheme.morph\nTo see a live demo of the morph Bootswatch theme, visit [https://bootswatch.com/morph/](https://bootswatch.com/morph/).\n\n\ntheme.pulse\nTo see a live demo of the pulse Bootswatch theme, visit [https://bootswatch.com/pulse/](https://bootswatch.com/pulse/).\n\n\ntheme.quartz\nTo see a live demo of the quartz Bootswatch theme, visit [https://bootswatch.com/quartz/](https://bootswatch.com/quartz/).\n\n\ntheme.sandstone\nTo see a live demo of the sandstone Bootswatch theme, visit [https://bootswatch.com/sandstone/](https://bootswatch.com/sandstone/).\n\n\ntheme.simplex\nTo see a live demo of the simplex Bootswatch theme, visit [https://bootswatch.com/simplex/](https://bootswatch.com/simplex/).\n\n\ntheme.sketchy\nTo see a live demo of the sketchy Bootswatch theme, visit [https://bootswatch.com/sketchy/](https://bootswatch.com/sketchy/).\n\n\ntheme.slate\nTo see a live demo of the slate Bootswatch theme, visit [https://bootswatch.com/slate/](https://bootswatch.com/slate/).\n\n\ntheme.solar\nTo see a live demo of the solar Bootswatch theme, visit [https://bootswatch.com/solar/](https://bootswatch.com/solar/).\n\n\ntheme.spacelab\nTo see a live demo of the spacelab Bootswatch theme, visit [https://bootswatch.com/spacelab/](https://bootswatch.com/spacelab/).\n\n\ntheme.superhero\nTo see a live demo of the superhero Bootswatch theme, visit [https://bootswatch.com/superhero/](https://bootswatch.com/superhero/).\n\n\ntheme.united\nTo see a live demo of the united Bootswatch theme, visit [https://bootswatch.com/united/](https://bootswatch.com/united/).\n\n\ntheme.vapor\nTo see a live demo of the vapor Bootswatch theme, visit [https://bootswatch.com/vapor/](https://bootswatch.com/vapor/).\n\n\ntheme.yeti\nTo see a live demo of the yeti Bootswatch theme, visit [https://bootswatch.com/yeti/](https://bootswatch.com/yeti/).\n\n\ntheme.zephyr\nTo see a live demo of the zephyr Bootswatch theme, visit [https://bootswatch.com/zephyr/](https://bootswatch.com/zephyr/)."
  },
  {
    "objectID": "reference/theme.sketchy.html",
    "href": "reference/theme.sketchy.html",
    "title": "theme.sketchy",
    "section": "",
    "text": "theme.sketchy()\nTo see a live demo of the sketchy Bootswatch theme, visit https://bootswatch.com/sketchy/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (sketchy) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.sketchy(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.sketchy.html#returns",
    "href": "reference/theme.sketchy.html#returns",
    "title": "theme.sketchy",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (sketchy) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.sketchy.html#examples",
    "href": "reference/theme.sketchy.html#examples",
    "title": "theme.sketchy",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.sketchy(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.darkly.html",
    "href": "reference/theme.darkly.html",
    "title": "theme.darkly",
    "section": "",
    "text": "theme.darkly()\nTo see a live demo of the darkly Bootswatch theme, visit https://bootswatch.com/darkly/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (darkly) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.darkly(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.darkly.html#returns",
    "href": "reference/theme.darkly.html#returns",
    "title": "theme.darkly",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (darkly) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.darkly.html#examples",
    "href": "reference/theme.darkly.html#examples",
    "title": "theme.darkly",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.darkly(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.simplex.html",
    "href": "reference/theme.simplex.html",
    "title": "theme.simplex",
    "section": "",
    "text": "theme.simplex()\nTo see a live demo of the simplex Bootswatch theme, visit https://bootswatch.com/simplex/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (simplex) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.simplex(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.simplex.html#returns",
    "href": "reference/theme.simplex.html#returns",
    "title": "theme.simplex",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (simplex) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.simplex.html#examples",
    "href": "reference/theme.simplex.html#examples",
    "title": "theme.simplex",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.simplex(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.litera.html",
    "href": "reference/theme.litera.html",
    "title": "theme.litera",
    "section": "",
    "text": "theme.litera()\nTo see a live demo of the litera Bootswatch theme, visit https://bootswatch.com/litera/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (litera) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.litera(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.litera.html#returns",
    "href": "reference/theme.litera.html#returns",
    "title": "theme.litera",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (litera) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.litera.html#examples",
    "href": "reference/theme.litera.html#examples",
    "title": "theme.litera",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.litera(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.solar.html",
    "href": "reference/theme.solar.html",
    "title": "theme.solar",
    "section": "",
    "text": "theme.solar()\nTo see a live demo of the solar Bootswatch theme, visit https://bootswatch.com/solar/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (solar) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.solar(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.solar.html#returns",
    "href": "reference/theme.solar.html#returns",
    "title": "theme.solar",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (solar) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.solar.html#examples",
    "href": "reference/theme.solar.html#examples",
    "title": "theme.solar",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.solar(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.materia.html",
    "href": "reference/theme.materia.html",
    "title": "theme.materia",
    "section": "",
    "text": "theme.materia()\nTo see a live demo of the materia Bootswatch theme, visit https://bootswatch.com/materia/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (materia) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.materia(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.materia.html#returns",
    "href": "reference/theme.materia.html#returns",
    "title": "theme.materia",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (materia) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.materia.html#examples",
    "href": "reference/theme.materia.html#examples",
    "title": "theme.materia",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.materia(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.yeti.html",
    "href": "reference/theme.yeti.html",
    "title": "theme.yeti",
    "section": "",
    "text": "theme.yeti()\nTo see a live demo of the yeti Bootswatch theme, visit https://bootswatch.com/yeti/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (yeti) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.yeti(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.yeti.html#returns",
    "href": "reference/theme.yeti.html#returns",
    "title": "theme.yeti",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (yeti) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.yeti.html#examples",
    "href": "reference/theme.yeti.html#examples",
    "title": "theme.yeti",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.yeti(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.slate.html",
    "href": "reference/theme.slate.html",
    "title": "theme.slate",
    "section": "",
    "text": "theme.slate()\nTo see a live demo of the slate Bootswatch theme, visit https://bootswatch.com/slate/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (slate) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.slate(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.slate.html#returns",
    "href": "reference/theme.slate.html#returns",
    "title": "theme.slate",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (slate) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.slate.html#examples",
    "href": "reference/theme.slate.html#examples",
    "title": "theme.slate",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.slate(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.lux.html",
    "href": "reference/theme.lux.html",
    "title": "theme.lux",
    "section": "",
    "text": "theme.lux()\nTo see a live demo of the lux Bootswatch theme, visit https://bootswatch.com/lux/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (lux) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.lux(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.lux.html#returns",
    "href": "reference/theme.lux.html#returns",
    "title": "theme.lux",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (lux) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.lux.html#examples",
    "href": "reference/theme.lux.html#examples",
    "title": "theme.lux",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.lux(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.sandstone.html",
    "href": "reference/theme.sandstone.html",
    "title": "theme.sandstone",
    "section": "",
    "text": "theme.sandstone()\nTo see a live demo of the sandstone Bootswatch theme, visit https://bootswatch.com/sandstone/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (sandstone) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.sandstone(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.sandstone.html#returns",
    "href": "reference/theme.sandstone.html#returns",
    "title": "theme.sandstone",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (sandstone) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.sandstone.html#examples",
    "href": "reference/theme.sandstone.html#examples",
    "title": "theme.sandstone",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.sandstone(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.zephyr.html",
    "href": "reference/theme.zephyr.html",
    "title": "theme.zephyr",
    "section": "",
    "text": "theme.zephyr()\nTo see a live demo of the zephyr Bootswatch theme, visit https://bootswatch.com/zephyr/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (zephyr) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.zephyr(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.zephyr.html#returns",
    "href": "reference/theme.zephyr.html#returns",
    "title": "theme.zephyr",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (zephyr) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.zephyr.html#examples",
    "href": "reference/theme.zephyr.html#examples",
    "title": "theme.zephyr",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.zephyr(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.lumen.html",
    "href": "reference/theme.lumen.html",
    "title": "theme.lumen",
    "section": "",
    "text": "theme.lumen()\nTo see a live demo of the lumen Bootswatch theme, visit https://bootswatch.com/lumen/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (lumen) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.lumen(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.lumen.html#returns",
    "href": "reference/theme.lumen.html#returns",
    "title": "theme.lumen",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (lumen) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.lumen.html#examples",
    "href": "reference/theme.lumen.html#examples",
    "title": "theme.lumen",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.lumen(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.cosmo.html",
    "href": "reference/theme.cosmo.html",
    "title": "theme.cosmo",
    "section": "",
    "text": "theme.cosmo()\nTo see a live demo of the cosmo Bootswatch theme, visit https://bootswatch.com/cosmo/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (cosmo) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.cosmo(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.cosmo.html#returns",
    "href": "reference/theme.cosmo.html#returns",
    "title": "theme.cosmo",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (cosmo) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.cosmo.html#examples",
    "href": "reference/theme.cosmo.html#examples",
    "title": "theme.cosmo",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.cosmo(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/get_theme.html",
    "href": "reference/get_theme.html",
    "title": "get_theme",
    "section": "",
    "text": "get_theme(name)\nCreate a Bootswatch and Bootstrap 5 theme for Shiny.\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nname\nBSW5_THEME_NAME\nA Bootswatch theme name.\nrequired\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nA list of HTML dependencies.\n\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 1000\nfrom datetime import date\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\nfrom shiny.ui import h2, tags\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    # Theme code - start\n    # Add the Theme's HTML Dependency object in the UI code\n    shinyswatch.get_theme(\"sketchy\"),\n    # # Equivalent to:\n    # shinyswatch.theme.sketchy(),\n    # Theme code - end\n    ui.panel_title(\"Changing the values of inputs from the server\"),\n    ui.row(\n        ui.column(\n            4,\n            ui.panel_well(\n                tags.h4(\"These inputs control the other inputs on the page\"),\n                ui.input_text(\n                    \"control_label\", \"This controls some of the labels:\", \"LABEL TEXT\"\n                ),\n                ui.input_slider(\n                    \"control_num\", \"This controls values:\", min=1, max=20, value=15\n                ),\n            ),\n        ),\n        ui.column(\n            4,\n            ui.panel_well(\n                tags.h4(\"These inputs are controlled by the other inputs\"),\n                ui.input_text(\"inText\", \"Text input:\", value=\"start text\"),\n                ui.input_numeric(\n                    \"inNumber\", \"Number input:\", min=1, max=20, value=5, step=0.5\n                ),\n                ui.input_numeric(\n                    \"inNumber2\", \"Number input 2:\", min=1, max=20, value=5, step=0.5\n                ),\n                ui.input_slider(\"inSlider\", \"Slider input:\", min=1, max=20, value=15),\n                ui.input_slider(\n                    \"inSlider2\", \"Slider input 2:\", min=1, max=20, value=(5, 15)\n                ),\n                ui.input_slider(\n                    \"inSlider3\", \"Slider input 3:\", min=1, max=20, value=(5, 15)\n                ),\n                ui.input_date(\"inDate\", \"Date input:\"),\n                ui.input_date_range(\"inDateRange\", \"Date range input:\"),\n            ),\n        ),\n        ui.column(\n            4,\n            ui.panel_well(\n                ui.input_checkbox(\"inCheckbox\", \"Checkbox input\", value=False),\n                ui.input_checkbox_group(\n                    \"inCheckboxGroup\",\n                    \"Checkbox group input:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                ),\n                ui.input_radio_buttons(\n                    \"inRadio\",\n                    \"Radio buttons:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                ),\n                ui.input_select(\n                    \"inSelect\",\n                    \"Select input:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                ),\n                ui.input_select(\n                    \"inSelect2\",\n                    \"Select input 2:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                    multiple=True,\n                ),\n            ),\n            ui.navset_tab(\n                ui.nav(\"panel1\", h2(\"This is the first panel.\")),\n                ui.nav(\"panel2\", h2(\"This is the second panel.\")),\n                id=\"inTabset\",\n            ),\n        ),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        # We'll use these multiple times, so use short var names for\n        # convenience.\n        c_label = input.control_label()\n        c_num = input.control_num()\n\n        # Text =====================================================\n        # Change both the label and the text\n        ui.update_text(\n            \"inText\",\n            label=\"New \" + c_label,\n            value=\"New text \" + str(c_num),\n        )\n\n        # Number ===================================================\n        # Change the value\n        ui.update_numeric(\"inNumber\", value=c_num)\n\n        # Change the label, value, min, and max\n        ui.update_numeric(\n            \"inNumber2\",\n            label=\"Number \" + c_label,\n            value=c_num,\n            min=c_num - 10,\n            max=c_num + 10,\n            step=5,\n        )\n\n        # Slider input =============================================\n        # Only label and value can be set for slider\n        ui.update_slider(\"inSlider\", label=\"Slider \" + c_label, value=c_num)\n\n        # Slider range input =======================================\n        # For sliders that pick out a range, pass in a vector of 2\n        # values.\n        ui.update_slider(\"inSlider2\", value=(c_num - 1, c_num + 1))\n\n        # Only change the upper handle\n        ui.update_slider(\"inSlider3\", value=(input.inSlider3()[0], c_num + 2))\n\n        # Date input ===============================================\n        # Only label and value can be set for date input\n        ui.update_date(\"inDate\", label=\"Date \" + c_label, value=date(2013, 4, c_num))\n\n        # Date range input =========================================\n        # Only label and value can be set for date range input\n        ui.update_date_range(\n            \"inDateRange\",\n            label=\"Date range \" + c_label,\n            start=date(2013, 1, c_num),\n            end=date(2013, 12, c_num),\n            min=date(2001, 1, c_num),\n            max=date(2030, 1, c_num),\n        )\n\n        # # Checkbox ===============================================\n        ui.update_checkbox(\"inCheckbox\", value=c_num % 2)\n\n        # Checkbox group ===========================================\n        # Create a list of new options, where the name of the items\n        # is something like 'option label x A', and the values are\n        # 'option-x-A'.\n        opt_labels = [f\"option label {c_num} {type}\" for type in [\"A\", \"B\"]]\n        opt_vals = [f\"option-{c_num}-{type}\" for type in [\"A\", \"B\"]]\n        opts_dict = dict(zip(opt_vals, opt_labels))\n\n        # Set the label, choices, and selected item\n        ui.update_checkbox_group(\n            \"inCheckboxGroup\",\n            label=\"Checkbox group \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-A\",\n        )\n\n        # Radio group ==============================================\n        ui.update_radio_buttons(\n            \"inRadio\",\n            label=\"Radio \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-A\",\n        )\n        # Select input =============================================\n        # Create a list of new options, where the name of the items\n        # is something like 'option label x A', and the values are\n        # 'option-x-A'.\n        ui.update_select(\n            \"inSelect\",\n            label=\"Select \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-A\",\n        )\n\n        # Can also set the label and select an item (or more than\n        # one if it's a multi-select)\n        ui.update_select(\n            \"inSelect2\",\n            label=\"Select label \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-B\",\n        )\n\n        # Tabset input =============================================\n        # Change the selected tab.\n        # The tabsetPanel must have been created with an 'id' argument\n        ui.update_navs(\"inTabset\", selected=\"panel2\" if c_num % 2 else \"panel1\")\n\n\napp = App(app_ui, server, debug=False)\n\n## file: requirements.txt\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/get_theme.html#parameters",
    "href": "reference/get_theme.html#parameters",
    "title": "get_theme",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nname\nBSW5_THEME_NAME\nA Bootswatch theme name.\nrequired"
  },
  {
    "objectID": "reference/get_theme.html#returns",
    "href": "reference/get_theme.html#returns",
    "title": "get_theme",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nA list of HTML dependencies."
  },
  {
    "objectID": "reference/get_theme.html#examples",
    "href": "reference/get_theme.html#examples",
    "title": "get_theme",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 1000\nfrom datetime import date\n\nfrom shiny import App, Inputs, Outputs, Session, reactive, ui\nfrom shiny.ui import h2, tags\n\nimport shinyswatch\n\napp_ui = ui.page_fluid(\n    # Theme code - start\n    # Add the Theme's HTML Dependency object in the UI code\n    shinyswatch.get_theme(\"sketchy\"),\n    # # Equivalent to:\n    # shinyswatch.theme.sketchy(),\n    # Theme code - end\n    ui.panel_title(\"Changing the values of inputs from the server\"),\n    ui.row(\n        ui.column(\n            4,\n            ui.panel_well(\n                tags.h4(\"These inputs control the other inputs on the page\"),\n                ui.input_text(\n                    \"control_label\", \"This controls some of the labels:\", \"LABEL TEXT\"\n                ),\n                ui.input_slider(\n                    \"control_num\", \"This controls values:\", min=1, max=20, value=15\n                ),\n            ),\n        ),\n        ui.column(\n            4,\n            ui.panel_well(\n                tags.h4(\"These inputs are controlled by the other inputs\"),\n                ui.input_text(\"inText\", \"Text input:\", value=\"start text\"),\n                ui.input_numeric(\n                    \"inNumber\", \"Number input:\", min=1, max=20, value=5, step=0.5\n                ),\n                ui.input_numeric(\n                    \"inNumber2\", \"Number input 2:\", min=1, max=20, value=5, step=0.5\n                ),\n                ui.input_slider(\"inSlider\", \"Slider input:\", min=1, max=20, value=15),\n                ui.input_slider(\n                    \"inSlider2\", \"Slider input 2:\", min=1, max=20, value=(5, 15)\n                ),\n                ui.input_slider(\n                    \"inSlider3\", \"Slider input 3:\", min=1, max=20, value=(5, 15)\n                ),\n                ui.input_date(\"inDate\", \"Date input:\"),\n                ui.input_date_range(\"inDateRange\", \"Date range input:\"),\n            ),\n        ),\n        ui.column(\n            4,\n            ui.panel_well(\n                ui.input_checkbox(\"inCheckbox\", \"Checkbox input\", value=False),\n                ui.input_checkbox_group(\n                    \"inCheckboxGroup\",\n                    \"Checkbox group input:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                ),\n                ui.input_radio_buttons(\n                    \"inRadio\",\n                    \"Radio buttons:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                ),\n                ui.input_select(\n                    \"inSelect\",\n                    \"Select input:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                ),\n                ui.input_select(\n                    \"inSelect2\",\n                    \"Select input 2:\",\n                    {\n                        \"option1\": \"label 1\",\n                        \"option2\": \"label 2\",\n                    },\n                    multiple=True,\n                ),\n            ),\n            ui.navset_tab(\n                ui.nav(\"panel1\", h2(\"This is the first panel.\")),\n                ui.nav(\"panel2\", h2(\"This is the second panel.\")),\n                id=\"inTabset\",\n            ),\n        ),\n    ),\n)\n\n\ndef server(input: Inputs, output: Outputs, session: Session):\n    @reactive.Effect\n    def _():\n        # We'll use these multiple times, so use short var names for\n        # convenience.\n        c_label = input.control_label()\n        c_num = input.control_num()\n\n        # Text =====================================================\n        # Change both the label and the text\n        ui.update_text(\n            \"inText\",\n            label=\"New \" + c_label,\n            value=\"New text \" + str(c_num),\n        )\n\n        # Number ===================================================\n        # Change the value\n        ui.update_numeric(\"inNumber\", value=c_num)\n\n        # Change the label, value, min, and max\n        ui.update_numeric(\n            \"inNumber2\",\n            label=\"Number \" + c_label,\n            value=c_num,\n            min=c_num - 10,\n            max=c_num + 10,\n            step=5,\n        )\n\n        # Slider input =============================================\n        # Only label and value can be set for slider\n        ui.update_slider(\"inSlider\", label=\"Slider \" + c_label, value=c_num)\n\n        # Slider range input =======================================\n        # For sliders that pick out a range, pass in a vector of 2\n        # values.\n        ui.update_slider(\"inSlider2\", value=(c_num - 1, c_num + 1))\n\n        # Only change the upper handle\n        ui.update_slider(\"inSlider3\", value=(input.inSlider3()[0], c_num + 2))\n\n        # Date input ===============================================\n        # Only label and value can be set for date input\n        ui.update_date(\"inDate\", label=\"Date \" + c_label, value=date(2013, 4, c_num))\n\n        # Date range input =========================================\n        # Only label and value can be set for date range input\n        ui.update_date_range(\n            \"inDateRange\",\n            label=\"Date range \" + c_label,\n            start=date(2013, 1, c_num),\n            end=date(2013, 12, c_num),\n            min=date(2001, 1, c_num),\n            max=date(2030, 1, c_num),\n        )\n\n        # # Checkbox ===============================================\n        ui.update_checkbox(\"inCheckbox\", value=c_num % 2)\n\n        # Checkbox group ===========================================\n        # Create a list of new options, where the name of the items\n        # is something like 'option label x A', and the values are\n        # 'option-x-A'.\n        opt_labels = [f\"option label {c_num} {type}\" for type in [\"A\", \"B\"]]\n        opt_vals = [f\"option-{c_num}-{type}\" for type in [\"A\", \"B\"]]\n        opts_dict = dict(zip(opt_vals, opt_labels))\n\n        # Set the label, choices, and selected item\n        ui.update_checkbox_group(\n            \"inCheckboxGroup\",\n            label=\"Checkbox group \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-A\",\n        )\n\n        # Radio group ==============================================\n        ui.update_radio_buttons(\n            \"inRadio\",\n            label=\"Radio \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-A\",\n        )\n        # Select input =============================================\n        # Create a list of new options, where the name of the items\n        # is something like 'option label x A', and the values are\n        # 'option-x-A'.\n        ui.update_select(\n            \"inSelect\",\n            label=\"Select \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-A\",\n        )\n\n        # Can also set the label and select an item (or more than\n        # one if it's a multi-select)\n        ui.update_select(\n            \"inSelect2\",\n            label=\"Select label \" + c_label,\n            choices=opts_dict,\n            selected=f\"option-{c_num}-B\",\n        )\n\n        # Tabset input =============================================\n        # Change the selected tab.\n        # The tabsetPanel must have been created with an 'id' argument\n        ui.update_navs(\"inTabset\", selected=\"panel2\" if c_num % 2 else \"panel1\")\n\n\napp = App(app_ui, server, debug=False)\n\n## file: requirements.txt\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.journal.html",
    "href": "reference/theme.journal.html",
    "title": "theme.journal",
    "section": "",
    "text": "theme.journal()\nTo see a live demo of the journal Bootswatch theme, visit https://bootswatch.com/journal/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (journal) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.journal(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.journal.html#returns",
    "href": "reference/theme.journal.html#returns",
    "title": "theme.journal",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (journal) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.journal.html#examples",
    "href": "reference/theme.journal.html#examples",
    "title": "theme.journal",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.journal(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.spacelab.html",
    "href": "reference/theme.spacelab.html",
    "title": "theme.spacelab",
    "section": "",
    "text": "theme.spacelab()\nTo see a live demo of the spacelab Bootswatch theme, visit https://bootswatch.com/spacelab/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (spacelab) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.spacelab(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.spacelab.html#returns",
    "href": "reference/theme.spacelab.html#returns",
    "title": "theme.spacelab",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (spacelab) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.spacelab.html#examples",
    "href": "reference/theme.spacelab.html#examples",
    "title": "theme.spacelab",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.spacelab(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.vapor.html",
    "href": "reference/theme.vapor.html",
    "title": "theme.vapor",
    "section": "",
    "text": "theme.vapor()\nTo see a live demo of the vapor Bootswatch theme, visit https://bootswatch.com/vapor/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (vapor) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.vapor(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.vapor.html#returns",
    "href": "reference/theme.vapor.html#returns",
    "title": "theme.vapor",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (vapor) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.vapor.html#examples",
    "href": "reference/theme.vapor.html#examples",
    "title": "theme.vapor",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.vapor(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.cyborg.html",
    "href": "reference/theme.cyborg.html",
    "title": "theme.cyborg",
    "section": "",
    "text": "theme.cyborg()\nTo see a live demo of the cyborg Bootswatch theme, visit https://bootswatch.com/cyborg/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (cyborg) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.cyborg(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.cyborg.html#returns",
    "href": "reference/theme.cyborg.html#returns",
    "title": "theme.cyborg",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (cyborg) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.cyborg.html#examples",
    "href": "reference/theme.cyborg.html#examples",
    "title": "theme.cyborg",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.cyborg(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.quartz.html",
    "href": "reference/theme.quartz.html",
    "title": "theme.quartz",
    "section": "",
    "text": "theme.quartz()\nTo see a live demo of the quartz Bootswatch theme, visit https://bootswatch.com/quartz/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (quartz) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.quartz(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.quartz.html#returns",
    "href": "reference/theme.quartz.html#returns",
    "title": "theme.quartz",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (quartz) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.quartz.html#examples",
    "href": "reference/theme.quartz.html#examples",
    "title": "theme.quartz",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.quartz(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.minty.html",
    "href": "reference/theme.minty.html",
    "title": "theme.minty",
    "section": "",
    "text": "theme.minty()\nTo see a live demo of the minty Bootswatch theme, visit https://bootswatch.com/minty/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (minty) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.minty(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.minty.html#returns",
    "href": "reference/theme.minty.html#returns",
    "title": "theme.minty",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (minty) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.minty.html#examples",
    "href": "reference/theme.minty.html#examples",
    "title": "theme.minty",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.minty(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.pulse.html",
    "href": "reference/theme.pulse.html",
    "title": "theme.pulse",
    "section": "",
    "text": "theme.pulse()\nTo see a live demo of the pulse Bootswatch theme, visit https://bootswatch.com/pulse/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (pulse) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.pulse(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.pulse.html#returns",
    "href": "reference/theme.pulse.html#returns",
    "title": "theme.pulse",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (pulse) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.pulse.html#examples",
    "href": "reference/theme.pulse.html#examples",
    "title": "theme.pulse",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.pulse(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.morph.html",
    "href": "reference/theme.morph.html",
    "title": "theme.morph",
    "section": "",
    "text": "theme.morph()\nTo see a live demo of the morph Bootswatch theme, visit https://bootswatch.com/morph/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (morph) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.morph(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.morph.html#returns",
    "href": "reference/theme.morph.html#returns",
    "title": "theme.morph",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (morph) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.morph.html#examples",
    "href": "reference/theme.morph.html#examples",
    "title": "theme.morph",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.morph(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.flatly.html",
    "href": "reference/theme.flatly.html",
    "title": "theme.flatly",
    "section": "",
    "text": "theme.flatly()\nTo see a live demo of the flatly Bootswatch theme, visit https://bootswatch.com/flatly/.\n\n\n\n\n\nType\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (flatly) and Bootstrap 5 theme.\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.flatly(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  },
  {
    "objectID": "reference/theme.flatly.html#returns",
    "href": "reference/theme.flatly.html#returns",
    "title": "theme.flatly",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nlist[htmltools.HTMLDependency]\nList of HTMLDependency objects that create a Bootswatch (flatly) and Bootstrap 5 theme."
  },
  {
    "objectID": "reference/theme.flatly.html#examples",
    "href": "reference/theme.flatly.html#examples",
    "title": "theme.flatly",
    "section": "",
    "text": "#| standalone: true\n#| components: [editor, viewer]\n#| layout: vertical\n#| viewerHeight: 800\n## file: app.py\nimport pandas as pd\nfrom shiny import App, render, ui\n\nimport shinyswatch\n\napp_ui = ui.page_navbar(\n    ui.nav(\n        \"Navbar 1\",\n        shinyswatch.theme.flatly(),\n        ui.layout_sidebar(\n            ui.panel_sidebar(\n                ui.input_file(\"file\", \"File input:\"),\n                ui.input_text(\"txt\", \"Text input:\", \"general\"),\n                ui.input_slider(\"slider\", \"Slider input:\", 1, 100, 30),\n                ui.tags.h5(\"Default actionButton:\"),\n                ui.input_action_button(\"action\", \"Search\"),\n                ui.tags.h5(\"actionButton with CSS class:\"),\n                ui.input_action_button(\n                    \"action2\", \"Action button\", class_=\"btn-primary\"\n                ),\n            ),\n            ui.panel_main(\n                ui.navset_tab(\n                    ui.nav(\n                        \"Tab 1\",\n                        ui.tags.h4(\"Table\"),\n                        ui.output_table(\"table\"),\n                        ui.tags.h4(\"Verbatim text output\"),\n                        ui.output_text_verbatim(\"txtout\"),\n                        ui.tags.h1(\"Header 1\"),\n                        ui.tags.h2(\"Header 2\"),\n                        ui.tags.h3(\"Header 3\"),\n                        ui.tags.h4(\"Header 4\"),\n                        ui.tags.h5(\"Header 5\"),\n                    ),\n                    ui.nav(\"Tab 2\", \"Tab 2 content\"),\n                    ui.nav(\"Tab 3\", \"Tab 3 content\"),\n                )\n            ),\n        ),\n    ),\n    ui.nav(\"Plot\", \"Plot content\"),\n    ui.nav(\"Table\", \"Table content\"),\n    title=\"shinyswatch\",\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txtout():\n        return f\"{input.txt()}, {input.slider()}, {input.slider()}\"\n\n    @output\n    @render.table\n    def table():\n        cars = pd.DataFrame({\"speed\": [4, 4, 7, 7], \"dist\": [2, 10, 4, 22]})\n        return cars\n\n\napp = App(app_ui, server)\n\n\n## file: requirements.txt\nJinja2\npandas\nshiny\nshinyswatch"
  }
]